op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 320000}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = []
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (320000, 1)
op0.sizes = ([320000], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
class op0_loop_body:
    var_ranges = {z0: 320000}
    index0 = z0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf0', get_index, constant, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[524288], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=80), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'F0BD7791CFB36BEB63EC01B18B3FD72985501D0F79E89ED576CCD798F9404442', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 320000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = 0.0
        tl.store(out_ptr0 + (x0), tmp0, xmask)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c1 + 32*tmp0, {c0: 200000, c1: 32}, atomic_add)]
op1.unmet_dependencies = [StarDep(name='buf0', mode='atomic_add')]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0 + 200000, {c0: 200000}, None),
        MemoryDep('arg0_1', c0, {c0: 200000}, None),
        MemoryDep('arg1_1', c1 + 32*tmp1, {c0: 200000, c1: 32}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = MutationLayoutSHOULDREMOVE('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
    buf1.mutations = ['buf0']
    buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (6400000, 1)
op1.sizes = ([200000, 32], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 200000], stride=[200000, 1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[2, 200000], stride=[200000, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
buf1_layout = MutationLayoutSHOULDREMOVE('cuda', torch.float32, size=[10000, 32], stride=[32, 1])
class op1_loop_body:
    var_ranges = {z0: 200000, z1: 32}
    index0 = z0 + 200000
    index1 = z0
    index2 = 32*indirect1 + z1
    index3 = 32*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf1', get_index_3, load_2, 'atomic_add')
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=80), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'F0BD7791CFB36BEB63EC01B18B3FD72985501D0F79E89ED576CCD798F9404442', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6400000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 32)
        x0 = xindex % 32
        tmp0 = tl.load(in_ptr0 + (200000 + x1), None, eviction_policy='evict_last')
        tmp2 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tl.device_assert((0 <= tmp0) & (tmp0 < 10000), "index out of bounds: 0 <= tmp0 < 10000")
        tmp3 = tl.full([XBLOCK], 10000, tl.int32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp2 < 0
        tmp6 = tl.where(tmp5, tmp4, tmp2)
        tl.device_assert((0 <= tmp6) & (tmp6 < 10000), "index out of bounds: 0 <= tmp6 < 10000")
        tmp8 = tl.load(in_ptr1 + (x0 + (32*tmp6)), None)
        tl.atomic_add(out_ptr0 + (x0 + (32*tmp0)), tmp8, None, sem='relaxed')


